!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_SHAPES	encoder/hardcode_shapes.c	15;"	d	file:
BBTREE_UTILS_H	libft/includes/bbtree_utils.h	14;"	d
BUFFSIZE	inc/fillit.h	11;"	d
BUFF_SIZE	libft/includes/get_next_line.h	23;"	d
DEPTH	libft/includes/get_next_line.h	31;"	d
EMPTY	inc/fillit.h	14;"	d
EMPY	encoder/hardcode_shapes.c	23;"	d	file:
FIG_SPACE	encoder/hardcode_shapes.c	20;"	d	file:
FIG_SPACE	inc/fillit.h	9;"	d
FILLIT_H	inc/fillit.h	3;"	d
FULL	encoder/hardcode_shapes.c	24;"	d	file:
FULL	inc/fillit.h	15;"	d
GET_NEXT_LINE_H	libft/includes/get_next_line.h	14;"	d
HARDCODE	Makefile	/^HARDCODE = "encoder\/hardcode_shapes"$/;"	m
I0	encoder/hardcode_shapes.c	11;"	d	file:
L0	encoder/hardcode_shapes.c	8;"	d	file:
L1	encoder/hardcode_shapes.c	9;"	d	file:
LIBFT_H	libft/includes/libft.h	14;"	d
MACRO_NAME	Makefile	/^MACRO_NAME = "SHAPES"$/;"	m
MAX_INPUT	inc/fillit.h	10;"	d
MAX_OPEN_FILES	libft/includes/get_next_line.h	20;"	d
N	libft/tests/swap_speed/test_swap_speed.c	4;"	d	file:
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
N_ROTATIONS	encoder/hardcode_shapes.c	21;"	d	file:
N_SHAPES	encoder/hardcode_shapes.c	16;"	d	file:
N_SHAPES	inc/shapes.h	6;"	d
PROJECT_PATH	tests/parser/multiple_input/Makefile	/^PROJECT_PATH = "..\/..\/"$/;"	m
SHAPES	inc/shapes.h	5;"	d
SHAPES_H	inc/shapes.h	3;"	d
SQ	encoder/hardcode_shapes.c	10;"	d	file:
SQ_SIDE	encoder/hardcode_shapes.c	19;"	d	file:
SQ_SIDE	inc/fillit.h	12;"	d
SRC	libft/Makefile	/^define SRC $/;"	m
T0	encoder/hardcode_shapes.c	7;"	d	file:
USED_LIBS	tests/parser/multiple_input/Makefile	/^USED_LIBS = -L$(PROJECT_PATH)\/libft -lft$/;"	m
Z0	encoder/hardcode_shapes.c	12;"	d	file:
Z1	encoder/hardcode_shapes.c	13;"	d	file:
add_index	libft/ft_bbtree_utils.c	/^void					**add_index(t_bbtree_node **tree, int index, int depth)$/;"	f
add_points	parser/parser.c	/^int	add_points(int current_shape[2 * FIG_SPACE], int *n_points, int row, char *line)$/;"	f
add_to_end	libft/ft_lstmap.c	/^static t_list	*add_to_end(t_list *l, t_list *new)$/;"	f	file:
avoid_leaks	libft/ft_strsplit.c	/^static void				avoid_leaks(char **res, int nlinks)$/;"	f	file:
calculate_offsets	parser/parser.c	/^void	calculate_offsets(int shape[2 * FIG_SPACE])$/;"	f
change_coord	encoder/hardcode_shapes.c	/^int		*change_coord(int *shape)$/;"	f
concat_and_free	libft/get_next_line.c	/^static char				*concat_and_free(t_list **l, unsigned int total_len)$/;"	f	file:
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
data	libft/includes/get_next_line.h	/^	char		*data;$/;"	m	struct:s_unread_buff
del_get_next	libft/ft_lstdel.c	/^static t_list	*del_get_next(t_list *l, void (*del)(void *, size_t))$/;"	f	file:
del_simple	libft/ft_del.c	/^void	del_simple(void *content, size_t content_size)$/;"	f
eof	libft/includes/get_next_line.h	/^	int			eof;$/;"	m	struct:s_unread_buff
find_shape	parser/parser.c	/^int	*find_shape(int shapes[N_SHAPES][2 * FIG_SPACE],\\$/;"	f
ft_array_subtract	libft/ft_array_subtract.c	/^int	*ft_array_subtract(int *arr, unsigned int len, int number, int in_place)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int			ft_atoi(const char *str)$/;"	f
ft_bsort_int	libft/ft_bsort_int.c	/^void		ft_bsort_int(int *a, unsigned int len, int ascending)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_atoi.c	/^static int	ft_isspace(char c)$/;"	f	file:
ft_isspace	libft/ft_strtrim.c	/^static int	ft_isspace(char c)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char				*ft_itoa(int n)$/;"	f
ft_itoa_stack	libft/ft_putnbr.c	/^static void			ft_itoa_stack(int n, char *s)$/;"	f	file:
ft_itoa_stack	libft/ft_putnbr_fd.c	/^static void			ft_itoa_stack(int n, char *s)$/;"	f	file:
ft_lstadd	libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstappend	libft/ft_lstappend.c	/^t_list	*ft_lstappend(t_list *lst, void const *content, size_t content_size)$/;"	f
ft_lstdel	libft/ft_lstdel.c	/^void			ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list			*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_max_int	libft/ft_max_int.c	/^int	*ft_max_int(int *arr, int len)$/;"	f
ft_maxval_int	libft/ft_maxval_int.c	/^int	ft_maxval_int(int *a, unsigned int len)$/;"	f
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memdup	libft/ft_memdup.c	/^void	*ft_memdup(void *c, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_min_int	libft/ft_min_int.c	/^int	*ft_min_int(int *arr, int len)$/;"	f
ft_minval_int	libft/ft_minval_int.c	/^int	ft_minval_int(int *a, unsigned int len)$/;"	f
ft_print_array	libft/ft_print_array.c	/^void	ft_print_array(int *a, int len)$/;"	f
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^void				ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void				ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *dest, const char *src)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dest, const char *src)$/;"	f
ft_strdel	libft/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_strequ	libft/ft_strequ.c	/^int	ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t			ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmap	libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s,$/;"	f
ft_strncat	libft/ft_strncat.c	/^char	*ft_strncat(char *dest, const char *src, size_t n)$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/ft_strncpy.c	/^char	*ft_strncpy(char *dest, const char *src, size_t n)$/;"	f
ft_strnequ	libft/ft_strnequ.c	/^int	ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strsplit	libft/ft_strsplit.c	/^char					**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libft/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s)$/;"	f
ft_swap	libft/ft_swap.c	/^void	ft_swap(void *a, void *b, size_t len)$/;"	f
ft_swapint	libft/ft_swapint.c	/^void	ft_swapint(int *a, int *b)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_all_unique	encoder/hardcode_shapes.c	/^t_list	*get_all_unique(int shapes[N_SHAPES][FIG_SPACE])$/;"	f
get_n_words	libft/ft_strsplit.c	/^static int				get_n_words(char const *s, char c)$/;"	f	file:
get_next_line	libft/get_next_line.c	/^int						get_next_line(const int fd, char **line)$/;"	f
good_format	parser/parser.c	/^int	good_format(char *line)$/;"	f
io_err	libft/includes/get_next_line.h	/^	int			io_err;$/;"	m	struct:s_unread_buff
is_unique	encoder/hardcode_shapes.c	/^int		is_unique(int *shape_2d, t_list *seen)$/;"	f
isin	encoder/hardcode_shapes.c	/^int	isin(int number, int *array, int len)$/;"	f
len_of_next	libft/ft_strsplit.c	/^static size_t			len_of_next(const char *src, char sep)$/;"	f	file:
main	encoder/hardcode_shapes.c	/^int	main()$/;"	f
main	libft/tests/sort_int/sort_array.c	/^int	main()$/;"	f
main	libft/tests/swap_speed/test_swap_speed.c	/^int	main()$/;"	f
main	tests/array_print/main.c	/^int main()$/;"	f
main	tests/parser/multiple_input/main.c	/^int	main(int argc, char **argv)$/;"	f
my_abs	libft/ft_itoa.c	/^static int			my_abs(int n)$/;"	f	file:
my_abs	libft/ft_putnbr.c	/^static int			my_abs(int n)$/;"	f	file:
my_abs	libft/ft_putnbr_fd.c	/^static int			my_abs(int n)$/;"	f	file:
nbytes	libft/includes/get_next_line.h	/^	int			nbytes;$/;"	m	struct:s_unread_buff
new_buf	libft/get_next_line.c	/^static t_unread_buff	*new_buf(void)$/;"	f	file:
new_node	libft/ft_bbtree_utils.c	/^static t_bbtree_node	*new_node(void)$/;"	f	file:
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next_level	libft/ft_bbtree_utils.c	/^static t_bbtree_node	*next_level(t_bbtree_node *current, int direction)$/;"	f	file:
nl_found	libft/includes/get_next_line.h	/^	int			nl_found;$/;"	m	struct:s_unread_buff
one	libft/includes/bbtree_utils.h	/^	void				*one;$/;"	m	struct:s_bbtree_node
parse_all	parser/parser.c	/^int	parse_all(	$/;"	f
parse_tetr	parser/parser.c	/^int	*parse_tetr(int fd,\\$/;"	f
pos	libft/includes/get_next_line.h	/^	int			pos;$/;"	m	struct:s_unread_buff
print_2d_shape	encoder/hardcode_shapes.c	/^void	print_2d_shape(int *xy_offsets)$/;"	f
print_all_shapes	encoder/hardcode_shapes.c	/^void	print_all_shapes(t_list *all_shapes)$/;"	f
print_array	libft/tests/sort_int/sort_array.c	/^void	print_array(int *a, int len)$/;"	f
print_figure	encoder/hardcode_shapes.c	/^void	print_figure(int *start)$/;"	f
print_nice_format	encoder/hardcode_shapes.c	/^void	print_nice_format(int shapes[N_SHAPES][FIG_SPACE])$/;"	f
print_shape	tests/array_print/main.c	/^void	print_shape(int *shape)$/;"	f
print_shape_debug	encoder/hardcode_shapes.c	/^void	print_shape_debug(int *shape)$/;"	f
put_max_first	libft/ft_bsort_int.c	/^static void put_max_first(int *a, unsigned int len)$/;"	f	file:
put_min_first	libft/ft_bsort_int.c	/^static void put_min_first(int *a, unsigned int len)$/;"	f	file:
reflect_shape	encoder/hardcode_shapes.c	/^void	reflect_shape(int *shape, int axis)$/;"	f
rotate_shape	encoder/hardcode_shapes.c	/^void	rotate_shape(int *shape, int direction)$/;"	f
s_bbtree_node	libft/includes/bbtree_utils.h	/^typedef	struct			s_bbtree_node$/;"	s
s_list	libft/includes/libft.h	/^typedef struct		s_list$/;"	s
s_unread_buff	libft/includes/get_next_line.h	/^typedef struct	s_unread_buff$/;"	s
seek_nl	libft/get_next_line.c	/^static int				seek_nl(t_unread_buff *buff, int fd, t_list **l)$/;"	f	file:
start_of_next	libft/ft_strsplit.c	/^static const char		*start_of_next(const char *s, char sep)$/;"	f	file:
str_rev	libft/ft_itoa.c	/^static void			str_rev(char *s)$/;"	f	file:
str_rev	libft/ft_putnbr.c	/^static void			str_rev(char *s)$/;"	f	file:
str_rev	libft/ft_putnbr_fd.c	/^static void			str_rev(char *s)$/;"	f	file:
t_bbtree_node	libft/includes/bbtree_utils.h	/^}						t_bbtree_node;$/;"	t	typeref:struct:s_bbtree_node
t_list	libft/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_unread_buff	libft/includes/get_next_line.h	/^}				t_unread_buff;$/;"	t	typeref:struct:s_unread_buff
try_buffer	libft/get_next_line.c	/^static size_t			try_buffer(t_unread_buff *buff, t_list **l)$/;"	f	file:
zero	libft/includes/bbtree_utils.h	/^	void				*zero;$/;"	m	struct:s_bbtree_node
